/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Feb 21 2021 15:03:56 GMT-0500 (Eastern Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of FSMGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin FSMGenerator.
     * @constructor
     */
    function FSMGenerator() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    FSMGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    FSMGenerator.prototype = Object.create(PluginBase.prototype);
    FSMGenerator.prototype.constructor = FSMGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    FSMGenerator.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const self = this;

        const codeContent = self.core.getAttribute(self.activeNode,'customMoveCode');

        // Loading the children however requires data that is not (necessarily) available
        self.core.loadChildren(self.activeNode, function (err, children) {
            if (err) {
            // Something went wrong!
            // Handle the error and return.
                console.log("Error occured")
                return;
            }
            // We have an array of the children and can get information from them.
            for (var i = 0; i < children.length; i++) {
                self.core.deleteNode(children[i]);
            }

            var state = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/9']);
            FSMGenerator.prototype.getAllFunctions(codeContent).forEach(fn => {
                var transition = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/A']);
                self.core.setAttribute(state, 'name', 'core');
                self.core.setAttribute(transition, 'name', fn.name);
                self.core.setAttribute(transition, 'statements', fn.code);
                self.core.setAttribute(transition, 'input', fn.inputs);
                self.core.setAttribute(transition, 'output', fn.outputs);
                // self.core.setAttribute(transition, 'tags', fn.tags);
                self.core.setPointer(transition, 'src', state);
                self.core.setPointer(transition, 'dst', state);
            });

            //Creation of initial state node
            var initState = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/z']);
            var createTransition = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/g']);
            var createLoop = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/g']);

            self.core.setAttribute(initState, 'name', 'C');

            const contractName = self.core.getAttribute(self.activeNode,'name');
            self.core.setAttribute(self.activeNode, 'imports', FSMGenerator.prototype.getImports(codeContent).join('\n'));
            self.core.setAttribute(self.activeNode, 'resources', FSMGenerator.prototype.getResouces(codeContent).join('\n'));

            self.core.setAttribute(createTransition, 'name', "start");
            self.core.setAttribute(createTransition, 'guards', "exists<"+contractName+"<Currency>>("+contractName+"_addr)");
            self.core.setAttribute(createTransition, 'input', contractName+"_addr: address");
            self.core.setAttribute(createTransition, 'output', "");
            // self.core.setAttribute(createTransition, 'tags', "");
            self.core.setPointer(createTransition, 'src', initState);
            self.core.setPointer(createTransition, 'dst', state);

            self.core.setAttribute(createLoop, 'name', "create");
            self.core.setAttribute(createLoop, 'statements', "");
            self.core.setAttribute(createLoop, 'input', contractName+"_owner: &signer");
            self.core.setAttribute(createLoop, 'output', "let "+contractName+"_owner_addr = Signer::address_of("+contractName+"_owner);\nmove_to<"+contractName+"<Currency>>("+contractName+"_owner, T {Diem::zero<Currency>(),\n"+contractName+"_owner_addr,\nDiemTimestamp::now_seconds()});");
            // self.core.setAttribute(createLoop, 'tags', "");
            self.core.setPointer(createLoop, 'src', initState);
            self.core.setPointer(createLoop, 'dst', initState);

            self.save('FSMGenerator updated model.')
                .then(() => {
                    self.result.setSuccess(true);
                    callback(null, self.result);
                })
                .catch((err) => {
                    // Result success is false at invocation.
                    self.logger.error(err.stack);
                    callback(err, self.result);
                });
        });
    };


    FSMGenerator.prototype.getResouces = function (codeContent) {
        return codeContent.match(/resource.+?(?=})+}/g)
    };

    FSMGenerator.prototype.getImports = function (codeContent) {
        return codeContent.match(/use.+?(?=;)/g);
    };

    FSMGenerator.prototype.getAllFunctions = function (codeContent) {
        //Get all function names
        var fNames = [];
        var functionDefinitionList = codeContent.match(/fun [^\{}]*/g);

        if (functionDefinitionList) {
            for (var i = 0; i < functionDefinitionList.length; i++) {
                var fName = {};
                fName.definition = functionDefinitionList[i];
                fName.name = functionDefinitionList[i].match(/fun [^\()]*/g)[0].replace('function ', '');
                // fName.modifiers = [];
                fName.outputs = '';
                fName.inputs = functionDefinitionList[i].substring(functionDefinitionList[i].indexOf('(')+1, functionDefinitionList[i].indexOf(')'));
                if(functionDefinitionList[i].indexOf('return') != -1) {
                    var returnval = functionDefinitionList[i].substring(functionDefinitionList[i].indexOf('return')+1);
                    fName.outputs = returnval.substring(returnval.indexOf('(')+1, returnval.indexOf(')'));
                    // fName.tags = functionDefinitionList[i].substring(functionDefinitionList[i].indexOf(')')+1, functionDefinitionList[i].indexOf('return'));
                }

                //Moving internal function code
                if (i != functionDefinitionList.length - 1) {
                    var body = codeContent.trim().substring(codeContent.trim().indexOf(functionDefinitionList[i]) + functionDefinitionList[i].length + 1, codeContent.trim().indexOf(functionDefinitionList[i + 1]));
                    body = body.trim().substring(0, body.trim().length - 1);
                    fName.code = body;
                } else {
                    var body = codeContent.trim().substring(codeContent.trim().indexOf(functionDefinitionList[i]) + functionDefinitionList[i].length + 1, codeContent.trim().length - 1);
                    body = body.trim().substring(0, body.trim().length - 1);
                    fName.code = body;
                }

                //Loading inputs for each function
                fNames.push(fName);
            }
        }
        return fNames;
    };

    return FSMGenerator;
});
