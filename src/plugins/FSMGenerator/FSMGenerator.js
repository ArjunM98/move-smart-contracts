/* globals define */
/* eslint-env node, browser */

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Feb 21 2021 15:03:56 GMT-0500 (Eastern Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
  'plugin/PluginConfig',
  'text!./metadata.json',
  'plugin/PluginBase',
  'tree-sitter',
  '@movei/tree-sitter-move'
], function (
  PluginConfig,
  pluginMetadata,
  PluginBase,
  Parser,
  MoveGrammer) {
  'use strict'

  pluginMetadata = JSON.parse(pluginMetadata)

  /**
     * Initializes a new instance of FSMGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin FSMGenerator.
     * @constructor
     */
  function FSMGenerator () {
    // Call base class' constructor.
    PluginBase.call(this)
    this.pluginMetadata = pluginMetadata
    this.parser = new Parser()
    this.parser.setLanguage(MoveGrammer)
  }

  /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
  FSMGenerator.metadata = pluginMetadata

  // Prototypical inheritance from PluginBase.
  FSMGenerator.prototype = Object.create(PluginBase.prototype)
  FSMGenerator.prototype.constructor = FSMGenerator

  /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
  FSMGenerator.prototype.main = function (callback) {
    // Use this to access core, project, result, logger etc from PluginBase.
    const self = this
    const codeContent = self.core.getAttribute(self.activeNode, 'customMoveCode') || ''

    const violations = FSMGenerator.prototype.parseResult.call(self, self.activeNode, codeContent)
    // Notify User of violations
    if (violations.length > 0) {
      console.log('There are violations')
      violations.forEach(violation => {
        console.log('Contract Node/ID = ' + violation.node.data.atr.name + ' Violation: ' + violation.message)
        self.createMessage(violation.node, violation.message, 'error')
      })
      throw new Error(self.activeNode + ' has ' + violations.length + ' violation(s). ' +
            'See messages for details.')
    }
    // Loading the children however requires data that is not (necessarily) available
    self.core.loadChildren(self.activeNode, function (err, children) {
      if (err) {
        // Something went wrong!
        // Handle the error and return.
        console.log('Error occured')
        return
      }
      // We have an array of the children and can get information from them.
      for (let i = 0; i < children.length; i++) {
        self.core.deleteNode(children[i])
      }

      const functions = FSMGenerator.prototype.getAllFunctions(codeContent)
      let imports = FSMGenerator.prototype.getImports(codeContent)
      let resources = FSMGenerator.prototype.getResouces(codeContent)

      if (imports.length > 0) { imports = imports.join('\n') } else { imports = '' }

      if (resources.length > 0) { resources = resources.join('\n') } else { resources = '' }

      const state = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/9'])
      self.core.setAttribute(state, 'name', 'core')

      functions.forEach(fn => {
        const transition = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/A'])
        self.core.setAttribute(transition, 'name', fn.name.replace('fun ', ''))
        self.core.setAttribute(transition, 'statements', fn.code)
        self.core.setAttribute(transition, 'input', fn.inputs)
        self.core.setAttribute(transition, 'output', fn.outputs)
        // self.core.setAttribute(transition, 'tags', fn.tags);
        self.core.setPointer(transition, 'src', state)
        self.core.setPointer(transition, 'dst', state)
      })

      // Creation of initial state node
      const initState = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/z'])
      const createTransition = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/A'])
      const createLoop = self.core.createChild(self.activeNode, self.core.getAllMetaNodes(self.activeNode)['/m/g'])

      self.core.setAttribute(initState, 'name', 'C')

      const contractName = self.core.getAttribute(self.activeNode, 'name')
      self.core.setAttribute(self.activeNode, 'imports', imports)
      self.core.setAttribute(self.activeNode, 'resources', resources)

      self.core.setAttribute(createTransition, 'name', 'start')
      self.core.setAttribute(createTransition, 'guards', 'exists<' + contractName + '<Currency>>(' + contractName + '_addr)')
      self.core.setAttribute(createTransition, 'input', contractName + '_addr: address')
      self.core.setAttribute(createTransition, 'output', '')
      // self.core.setAttribute(createTransition, 'tags', "");
      self.core.setPointer(createTransition, 'src', initState)
      self.core.setPointer(createTransition, 'dst', state)

      self.core.setAttribute(createLoop, 'name', 'create')
      self.core.setAttribute(createLoop, 'statements', '')
      self.core.setAttribute(createLoop, 'input', contractName + '_owner: &signer')
      self.core.setAttribute(createLoop, 'output', 'let ' + contractName + '_owner_addr = Signer::address_of(' + contractName + '_owner);\nmove_to<' + contractName + '<Currency>>(' + contractName + '_owner, T {Diem::zero<Currency>(),\n' + contractName + '_owner_addr,\nDiemTimestamp::now_seconds()});')
      // self.core.setAttribute(createLoop, 'tags', "");
      self.core.setPointer(createLoop, 'src', initState)
      self.core.setPointer(createLoop, 'dst', initState)

      self.save('FSMGenerator updated model.')
        .then(() => {
          self.result.setSuccess(true)
          callback(null, self.result)
        })
        .catch((err) => {
          // Result success is false at invocation.
          self.logger.error(err.stack)
          callback(err, self.result)
        })
    })
  }

  FSMGenerator.prototype.getResouces = function (codeContent) {
    return codeContent.match(/resource.+?(?=})+}/g) || []
  }

  FSMGenerator.prototype.getImports = function (codeContent) {
    return codeContent.match(/use.+?(?=;)+;/g) || []
  }

  FSMGenerator.prototype.getAllFunctions = function (codeContent) {
    // Get all function names
    const fNames = []
    const functionDefinitionList = codeContent.match(/fun [^{}]*/g)

    if (functionDefinitionList) {
      for (let i = 0; i < functionDefinitionList.length; i++) {
        const fName = {}
        fName.definition = functionDefinitionList[i]
        fName.name = functionDefinitionList[i].match(/fun [^()]*/g)[0].replace('function ', '')
        // fName.modifiers = [];
        fName.outputs = ''
        fName.inputs = functionDefinitionList[i].substring(functionDefinitionList[i].indexOf('(') + 1, functionDefinitionList[i].indexOf(')'))
        if (functionDefinitionList[i].indexOf('return') !== -1) {
          const returnval = functionDefinitionList[i].substring(functionDefinitionList[i].indexOf('return') + 1)
          fName.outputs = returnval.substring(returnval.indexOf('(') + 1, returnval.indexOf(')'))
          // fName.tags = functionDefinitionList[i].substring(functionDefinitionList[i].indexOf(')')+1, functionDefinitionList[i].indexOf('return'));
        }

        // Moving internal function code
        if (i !== functionDefinitionList.length - 1) {
          let body = codeContent.trim().substring(codeContent.trim().indexOf(functionDefinitionList[i]) + functionDefinitionList[i].length + 1, codeContent.trim().indexOf(functionDefinitionList[i + 1]))
          body = body.trim().substring(0, body.trim().length - 1)
          fName.code = body
        } else {
          let body = codeContent.trim().substring(codeContent.trim().indexOf(functionDefinitionList[i]) + functionDefinitionList[i].length + 1, codeContent.trim().length - 1)
          body = body.trim().substring(0, body.trim().length - 1)
          fName.code = body
        }

        // Loading inputs for each function
        fNames.push(fName)
      }
    }
    return fNames
  }

  FSMGenerator.prototype.parseResult = function (contractNode, code) {
    const self = this
    const tree = self.parser.parse(code)
    const violations = []

    const cursor = tree.walk()
    let moreSiblings = true
    let moreChildren = true
    let depth = 0
    cursor.gotoFirstChild()

    // DFS - Visit all children, and backtrack based on depth
    while (moreSiblings || depth > 0) {
      while (moreChildren) {
        if (cursor.nodeType === 'ERROR') {
          violations.push({
            node: contractNode,
            message: 'Unexpected : ' + code.slice(cursor.startIndex, cursor.endIndex)
          })
        }
        moreChildren = cursor.gotoFirstChild()
        // Only increment if I went deeper
        if (moreChildren) {
          depth += 1
        }
      }

      // move to available sibling
      moreSiblings = cursor.gotoNextSibling()
      if (moreSiblings) {
        moreChildren = true
      } else {
        // no more siblings backtrack
        cursor.gotoParent()
        depth -= 1
      }
    }
    return violations
  }

  return FSMGenerator
})
